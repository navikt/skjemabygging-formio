name: Build and test monorepo - deploy bygger if master
on:
  push

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE: "docker.pkg.github.com/${{ github.repository }}/bygger:${{github.sha }}"
jobs:
  build-and-test:
    name: "Build and test packages"
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.17.0'
      - name: "Bootstrap"
        run: yarn bootstrap
      - name: "Build"
        run: yarn build
      - name: "Test"
        run: yarn test
  verify-scripts:
    name: "Verify scripts"
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.17.0'
      - name: "Build scripts"
        run: yarn build:scripts

  package-and-push-bygger:
    if: github.ref == 'refs/heads/master' # only create new release on the master branch
    needs: [build-and-test, verify-scripts]
    name: "Package bygger"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14.17.0'
      - name: "Install top-level dependencies"
        run: yarn install --frozen-lockfile
      - name: "Prepare local dependencies for shared packages"
        run: node bin/prepare-production-build.mjs
      - name: "Build shared-domain"
        working-directory: ./packages/shared-domain
        run: yarn install --frozen-lockfile && yarn build
      - name: "Build shared-components"
        working-directory: ./packages/shared-components
        run: yarn install --frozen-lockfile && yarn build
      - name: "Bygger (Frontend): install dependencies and build"
        working-directory: ./packages/bygger
        env:
          REACT_APP_FORMIO_PROJECT_URL: "https://protected-island-44773.herokuapp.com"
          REACT_APP_PUSHER_CLUSTER: "mt1"
          REACT_APP_PUSHER_KEY: "${{ secrets.REACT_APP_PUSHER_KEY }}"
          REACT_APP_GIT_VERSION: ${{ github.sha }}
        run: yarn install --frozen-lockfile && yarn build
      - name: "Bygger (Backend): install dependencies"
        working-directory: ./packages/bygger/server
        run: yarn install --frozen-lockfile
      - name: "Build and publish Docker image"
        working-directory: ./packages/bygger
        run: >
          docker build --pull --tag ${IMAGE} --build-arg git_sha=${{ github.sha }} .
          && echo ${{ secrets.GITHUB_TOKEN }} | docker login
          --username ${{ github.repository }} --password-stdin https://docker.pkg.github.com
          && docker push ${IMAGE}

  deploy-bygger-to-dev:
    name: "Deploy bygger to dev"
    needs: package-and-push-bygger
    runs-on: ubuntu-18.04
    steps:
      - uses: "actions/checkout@v2"
      - name: "Deploy to DEV"
        env:
          APIKEY: "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          CLUSTER: "dev-gcp"
          RESOURCE: "./packages/bygger/.nais/nais.yaml"
          VARS: "./packages/bygger/.nais/dev.yaml"
        uses: "nais/deploy/actions/deploy@v1"

  deploy-bygger-to-labs:
    name: "Deploy bygger to labs"
    needs: deploy-bygger-to-dev
    runs-on: ubuntu-18.04
    steps:
      - uses: "actions/checkout@v2"
      - name: "Deploy to LABS"
        env:
          APIKEY: "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          CLUSTER: "labs-gcp"
          RESOURCE: "./packages/bygger/.nais/nais.yaml"
          VARS: "./packages/bygger/.nais/labs.yaml"
        uses: "nais/deploy/actions/deploy@v1"

  trigger-deploy-fyllut-to-labs:
    name: "Trigger deploy fyllut to labs"
    needs: deploy-bygger-to-dev
    runs-on: ubuntu-latest
    steps:
      - name: "Trigger deploy fyllut to labs"
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "Trigger labs deploy"
          repo: navikt/skjemautfylling-formio
          ref: "labs-deploy"
          token: ${{ secrets.TEAM_ACCESS_TOKEN }}
          inputs: '{ "monorepoGitHash": "${{ github.sha }}" }'
