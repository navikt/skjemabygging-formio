name: Deploy to dev
on:
  workflow_dispatch:
    inputs:
      test:
        description: 'Run tests? (yes/no)'
        required: true
        default: 'no'
env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/skjemautfylling:${{ github.sha }}
  CI: 'true'
jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Npm Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Cache server node modules
        id: cache-server-node-modules
        uses: actions/cache@v2
        with:
          path: server/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('server/package-lock.json') }}
      - name: Install frontend deps
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - run: npm test
        if: ${{ github.event.inputs.test == 'yes' }}
      - run: npm run build
      - name: Install server deps
        if: steps.cache-server-node-modules.outputs.cache-hit != 'true'
        run: cd server && npm ci
      - name: Test server
        if: ${{ github.event.inputs.test == 'yes' }}
        run: cd server && npm test
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build_output
          path: |
            ./build
          if-no-files-found: error

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build_output
          path: ./build/
      - name: Docker build and push
        run: |
          docker build --tag ${IMAGE} .
          docker login docker.pkg.github.com -u ${{ github.repository }} -p ${{ secrets.GITHUB_TOKEN }}
          docker push ${IMAGE}
      - name: Generate dev nais variables
        run: |
          cat > .nais/dev-vars.yaml <<EOF
          ingresses:
            - https://fyllut.dev.nav.no/fyllut
          image: $IMAGE
          foersteside-host: www.nav.no
          foersteside-url: https://www.nav.no/soknader/api/forsteside
          dekorator-host: dekoratoren.dev.nav.no
          dekorator-url: https://dekoratoren.dev.nav.no
          EOF
      - name: Deploy to dev
        uses: nais/deploy/actions/deploy@master
        env:
          CLUSTER: dev-gcp
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          RESOURCE: .nais/config.yaml
          VARS: .nais/dev-vars.yaml
