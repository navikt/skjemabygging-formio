name: Manual deploy
run-name: Manual deploy to ${{ inputs.environment }} [${{ github.ref_name }}]
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "preprod"
        type: choice
        options:
          - preprod
          - preprod-alt
env:
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  package-and-push-bygger:
    name: "Package bygger"
    runs-on: ubuntu-latest-8-cores
    permissions:
      contents: "read"
      id-token: "write"
      packages: "read"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.17.1"
          cache: "yarn"
          cache-dependency-path: "**/yarn.lock"
          registry-url: https://npm.pkg.github.com/
          scope: "@navikt"
      - name: "Build application: Bygger"
        env:
          REACT_APP_GIT_VERSION: ${{ github.sha }}
          REACT_APP_GIT_BRANCH: ${{ github.ref_name }}
        run: bin/build-application.sh bygger

      - name: "Build and push Docker image for bygger"
        uses: nais/docker-build-push@v0
        id: docker-build-push-bygger
        with:
          team: skjemadigitalisering
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          image_suffix: bygger-${{ inputs.environment }}
          build_args: |
            git_sha=${{ github.sha }}
          dockerfile: ./packages/bygger/Dockerfile
          docker_context: ./packages/bygger

    outputs:
      image: ${{ steps.docker-build-push-bygger.outputs.image }}

  deploy-bygger-to-preprod:
    name: "Deploy bygger to preprod"
    needs: [package-and-push-bygger]
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v3"
      - name: "Deploy to preprod"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          APIKEY: "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          CLUSTER: "dev-gcp"
          RESOURCE: "./packages/bygger/.nais/nais.yaml"
          VARS: "./packages/bygger/.nais/${{ github.event.inputs.environment }}.yaml"
          VAR: image=${{ needs.package-and-push-bygger.outputs.image }}

  package-and-push-fyllut:
    name: "Package fyllut"
    runs-on: ubuntu-latest-8-cores
    permissions:
      contents: "read"
      id-token: "write"
      packages: "read"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.17.1"
          cache: "yarn"
          cache-dependency-path: "**/yarn.lock"
          registry-url: https://npm.pkg.github.com/
          scope: "@navikt"
      - name: "Build application: Fyllut"
        env:
          REACT_APP_GIT_VERSION: ${{ github.sha }}
          REACT_APP_GIT_BRANCH: ${{ github.ref_name }}
        run: bin/build-application.sh fyllut

      - name: "Build and push Docker image for fyllut"
        uses: nais/docker-build-push@v0
        id: docker-build-push-fyllut
        with:
          team: skjemadigitalisering
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          image_suffix: fyllut-${{ inputs.environment }}
          dockerfile: ./packages/fyllut/Dockerfile-base
          docker_context: ./packages/fyllut
          build_args: |
            git_sha=${{ github.sha }}
          pull: true
    outputs:
      image: ${{ steps.docker-build-push-fyllut.outputs.image }}

  deploy-fyllut-to-preprod:
    name: "Deploy fyllut to preprod"
    needs: [package-and-push-fyllut]
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v3"
      - name: "Deploy to preprod"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          APIKEY: "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          CLUSTER: "dev-gcp"
          RESOURCE: "./packages/fyllut/.nais/config.yaml"
          VARS: "./packages/fyllut/.nais/${{ github.event.inputs.environment }}.yaml"
          VAR: image=${{ needs.package-and-push-fyllut.outputs.image }}
